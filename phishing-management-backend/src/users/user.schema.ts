import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';
import { Document } from 'mongoose';

/**
 * User document type combining User class with Mongoose Document
 * Used for type safety when working with MongoDB operations
 */
export type UserDocument = User & Document;

/**
 * User schema for MongoDB collection
 * Handles user authentication and basic profile information
 * 
 * Features:
 * - Automatic timestamps (createdAt, updatedAt)
 * - Password exclusion from JSON serialization
 * - Email validation and normalization
 * - Unique email constraint
 */
@Schema({
  timestamps: true, // Automatically adds createdAt and updatedAt fields
  toJSON: {
    // Transform document when converting to JSON (API responses)
    transform: (doc, ret) => {
      delete ret.password; // Never expose password in API responses
      ret.id = ret._id;     // Convert MongoDB _id to id for frontend compatibility
      delete ret._id;       // Remove MongoDB internal _id field
      delete ret.__v;       // Remove MongoDB version field
      return ret;
    },
  },
})
export class User {
  /**
   * User ID (optional for new users, auto-generated by MongoDB)
   * Used as primary identifier for user references
   */
  id?: string;

  /**
   * User email address
   * - Must be unique across all users
   * - Automatically converted to lowercase
   * - Whitespace trimmed
   * - Required field for authentication
   */
  @Prop({ 
    required: true, 
    unique: true,
    lowercase: true,
    trim: true,
  })
  email: string;

  /**
   * User password (hashed)
   * - Minimum length of 6 characters enforced at DTO level
   * - Stored as bcrypt hash for security
   * - Never exposed in API responses (filtered in toJSON transform)
   */
  @Prop({ 
    required: true,
    minlength: 6,
  })
  password: string;

  /**
   * Account creation timestamp
   * Automatically set by timestamps: true option
   */
  @Prop({ default: Date.now })
  createdAt: Date;

  /**
   * Last modification timestamp
   * Automatically updated by timestamps: true option
   */
  @Prop({ default: Date.now })
  updatedAt: Date;
}

/**
 * Export compiled Mongoose schema for User collection
 * Used in UserModule to register the schema with MongoDB
 */
export const UserSchema = SchemaFactory.createForClass(User);

// MongoDB Indexes for query optimization
// Email index for fast authentication lookups (unique is already handled by @Prop)
UserSchema.index({ email: 1 }); 