import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';
import { Document, Types } from 'mongoose';

/**
 * Enumeration of possible phishing attempt statuses
 * Represents the lifecycle of a phishing simulation from creation to completion
 */
export enum PhishingStatus {
  /** Initial state when attempt is created but not yet sent */
  PENDING = 'pending',
  /** Email has been successfully sent to recipient */
  SENT = 'sent',
  /** Recipient has clicked the phishing link */
  CLICKED = 'clicked',
  /** Email sending failed or other error occurred */
  FAILED = 'failed',
}

/**
 * PhishingAttempt document type combining PhishingAttempt class with Mongoose Document
 * Used for type safety when working with MongoDB operations
 */
export type PhishingAttemptDocument = PhishingAttempt & Document;

/**
 * PhishingAttempt schema for MongoDB collection
 * Stores phishing simulation attempts with tracking capabilities
 * 
 * Features:
 * - Status tracking from creation to completion
 * - Email content and metadata storage
 * - User ownership and access control
 * - Timestamp tracking for analysis
 * - Click tracking for simulation effectiveness
 */
@Schema({
  timestamps: true, // Automatically adds createdAt and updatedAt fields
  toJSON: {
    // Transform document when converting to JSON (API responses)
    transform: (doc, ret) => {
      ret.id = ret._id;     // Convert MongoDB _id to id for frontend compatibility
      delete ret._id;       // Remove MongoDB internal _id field
      delete ret.__v;       // Remove MongoDB version field
      return ret;
    },
  },
})
export class PhishingAttempt {
  /**
   * Phishing attempt ID (optional for new attempts, auto-generated by MongoDB)
   * Used as primary identifier for attempt references
   */
  id?: string;

  /**
   * Target email address for the phishing simulation
   * - Required field for all attempts
   * - Whitespace trimmed automatically
   * - Must be valid email format (validated at DTO level)
   */
  @Prop({ required: true, trim: true })
  recipientEmail: string;

  /**
   * HTML content of the phishing email
   * - Contains the email body with styling
   * - May include {{CLICK_LINK}} placeholder for dynamic link injection
   * - Required field, can use default template if not provided
   */
  @Prop({ required: true })
  emailContent: string;

  /**
   * Email subject line for the phishing simulation
   * - Displayed in recipient's email client
   * - Required field, can use default if not provided
   * - Should be crafted to encourage opening
   */
  @Prop({ required: true })
  subject: string;

  /**
   * Current status of the phishing attempt
   * - Tracks progress through simulation lifecycle
   * - Defaults to PENDING when created
   * - Updated automatically by system events
   * - Used for filtering and reporting
   */
  @Prop({ 
    type: String,
    enum: PhishingStatus,
    default: PhishingStatus.PENDING,
  })
  status: PhishingStatus;

  /**
   * Timestamp when recipient clicked the phishing link
   * - Only set when status becomes CLICKED
   * - Used for measuring time-to-click metrics
   * - Optional field (null if never clicked)
   */
  @Prop({ type: Date })
  clickedAt?: Date;

  /**
   * Timestamp when email was successfully sent
   * - Set when status becomes SENT
   * - Used for delivery confirmation and metrics
   * - Optional field (null if sending failed)
   */
  @Prop({ type: Date })
  sentAt?: Date;

  /**
   * Reference to the user who created this phishing attempt
   * - MongoDB ObjectId referencing User collection
   * - Required for access control and ownership
   * - Used to filter attempts by user
   * - Ensures users only see their own attempts
   */
  @Prop({ type: Types.ObjectId, ref: 'User', required: true })
  createdBy: string;

  /**
   * Attempt creation timestamp
   * Automatically set by timestamps: true option
   */
  @Prop({ default: Date.now })
  createdAt: Date;

  /**
   * Last modification timestamp
   * Automatically updated by timestamps: true option
   */
  @Prop({ default: Date.now })
  updatedAt: Date;
}

/**
 * Export compiled Mongoose schema for PhishingAttempt collection
 * Used in PhishingModule to register the schema with MongoDB
 */
export const PhishingAttemptSchema = SchemaFactory.createForClass(PhishingAttempt);

// MongoDB Indexes for query optimization
// Compound index for user-specific queries with sorting
PhishingAttemptSchema.index({ createdBy: 1, createdAt: -1 });

// Single field indexes for filtering
PhishingAttemptSchema.index({ status: 1 });
PhishingAttemptSchema.index({ recipientEmail: 1 }); 